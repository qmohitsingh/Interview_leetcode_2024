##310. Minimum Height Trees

class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {

        if (n == 1) {
            return {0};
        }

        if (n == 2) {
            return {0, 1};
        }
        
        vector<set<int>> adjList(n);

        for (auto e : edges) {
            adjList[e[0]].insert(e[1]);
            adjList[e[1]].insert(e[0]);
        }

        queue<int> leaves;
        for (int i=0; i<n; i++) {
            if (adjList[i].size() == 1) {
                leaves.push(i);
            }
        }

        int remainingNodes = n;
        while(remainingNodes > 2) {
            int leaveCount = leaves.size();
            remainingNodes -= leaveCount;

            for (int i=0; i<leaveCount; i++) {
                int leaf = leaves.front();
                leaves.pop();

                int neighbour = *adjList[leaf].begin();
                adjList[neighbour].erase(leaf);

                if (adjList[neighbour].size() == 1) {
                    leaves.push(neighbour);
                }
            }
        }

        vector<int> centers;
        while(!leaves.empty()) {
            centers.push_back(leaves.front());
            leaves.pop();
        }

        return centers;

    }
};
